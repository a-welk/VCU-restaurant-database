---
title: Project Deliverable 7 Final Submission 
author: Edwin Constancia and Alex Welk
date: last-modified 
format:
  html:
    theme: cosmo
    toc: true
    embed-resources: true
---

<style>
body {
  background-color: #92a8d1 !important; /* Slightly lighter background color */
  color: #333333; /* Complementary text color */
  font-family: 'Roboto', sans-serif; /* Custom font (Roboto) */
  margin: 20px; /* Adjust margin for the entire page */
  line-height: 1.6; /* Adjust line height for readability */
}

h1 {
  margin: 20px 0; /* Adjust margin for h1 (main headers) */
  color: #002240; /* Header color (dark blue) */
}

h2 {
  margin: 15px 0; /* Adjust margin for h2 (sub-headers) */
  color: #002240; /* Header color (dark blue) */
}

p {
  margin: 10px 0; /* Adjust margin for paragraphs */
}

a {
  color: #black; /* Link color (orange) */
}

table {
  font-family: Roboto, sans-serif;

  border-collapse: collapse; /* Merge table borders for a solid line */
  border: 2px solid black; /* Add a 2px black border around the table */
}

th {
  background-color: #4CAF50;
  color: black;
  border: 2px solid white; /* Add a 2px black border around headers */
}

table caption {
  text-align: center;
}

</style>



# Project Overview

This database project focuses on addressing the dining challenges faced by Virginia Commonwealth University (VCU) students in Richmond. It aims to provide VCU students with a comprehensive resource that simplifies the process of finding nearby restaurants, exploring their menus, evaluating pricing, dietary preferences, and special discounts, and reading user reviews. By offering real-time, customizable dining options and proximity-based recommendations, the database enhances the overall dining experience for students, facilitating informed decision-making that caters to their culinary cravings, budgets, and location preferences.

- **Pitch Video**: [Link to Pitch Video](https://cdnapisec.kaltura.com/index.php/extwidget/preview/partner_id/1888231/uiconf_id/28242191/entry_id/1_z86s0xo9/embed/dynamic)
- **Design Video**: [Link to Design Video](https://cdnapisec.kaltura.com/index.php/extwidget/preview/partner_id/1888231/uiconf_id/28242191/entry_id/1_ft7h6ed9/embed/dynamic)
- **GitHub Repository**: [Link to GitHub Repository](https://github.com/cmsc-vcu/cmsc508-fa2023-prj-restaurantdirectory-group21/tree/main)
- **Final Video Presentation**: [Link to Design Video](https://cdnapisec.kaltura.com/index.php/extwidget/preview/partner_id/1888231/uiconf_id/28242191/entry_id/1_ft7h6ed9/embed/dynamic)

# Problem Description

## Problem Domain

The problem domain we're addressing involves VCU students' dining choices, specifically those who struggle to find affordable dining options that match their cravings while staying within their budget. Many students face the challenge of balancing their culinary preferences with limited financial resources. This issue is common on the campus of Virginia Commonwealth University (VCU) in Richmond, and it can be a hassle to locate nearby dining options.

## Need 

The database was meticulously crafted to tackle the dining challenges faced by VCU students by consolidating comprehensive information about local restaurants, their menus, pricing, notable dishes, dietary preferences, visitor reviews, and less than mile distance from campus. It stands as a centralized hub providing students with a wealth of dining options, catering to individual cravings, financial constraints, infromation on preferences for nearby dining establishments. The database is geared towards elevating the dining experience for VCU students. It streamlines the process of discovering satisfying meals within budgetary limits and close proximity, eliminating the hassle of extensive travel for dining.


## Context, Scope, and Perspective

The database is primarily designed for VCU students. Its perspective represents the student population at VCU who encounter challenges in finding suitable dining options on and around campus. It aims to empower students by offering a user-friendly platform tailored to their preferences and needs, including the convenience of locating nearby restaurants. 

## User roles and use cases

The database caters to various user roles, including VCU students, local restaurant owners, and administrators. VCU students primarily use the database to discover nearby restaurants, explore menu offerings, and find dietary preferences, helping them make informed dining choices. Restaurant owners input and manage information about their establishments, ensuring accurate representation. Administrators oversee the database's functionality and data quality. The database serves as a standalone platform, but it can be integrated with VCU's existing systems to enhance the student experience by providing location-based dining information.


## Security and Privacy

In our database design, we're planning to take robust measures to protect our restaurant's proprietary information, which includes critical data like restaurant locations, pricing, and our unique menu offerings. We understand that this information is not only a valuable asset but also essential to our competitive advantage. To secure it, we intend to establish stringent access controls. Our approach will involve implementing role-based access control, ensuring that only authorized individual can access or modify this vital data. By taking these steps, we aim to maintain the integrity of our business model and data, making sure it remains confidential and protected from unauthorized access.



# Database Design

## Entity-Relationship Diagram (ERD)

The following is an entity-relationship diagram (ERD) depicting the database's logical architecture:


```{mermaid}
erDiagram
    restaurants||--|{ locations : "Located at"
    restaurants ||--o{ review : "Has"
    restaurants ||--o{ accessibility : "Has"
    restaurants ||--|{ menu : "Has"
    menu }|--o{ menu_items : "Includes"
    item }|--|| menu_items : "Included in"
    item ||--o{ dietary_preference : "follows"


    dietary_preference {
        int dietary_preference_id
        varchar_256 dietary_preference_name
        primary_key dietary_preference_id
    }

    locations {
        int location_id
        varchar_256 location_address
        varchar_32 location_direction_from_VCU
        varchar_256 location_neighborhood
        primary_key location_id
    }

    restaurants {
        primary_key restaurant_id
        varchar restaurant_name
        varchar restaurant_formality_level
        varchar restaurant_avg_total_per_person
        int restaurant_location_id
        varchar restaurant_type
        foreign_key restaurant_location_id
    }

    review {
        int review_id
        int review_restaurant_id
        float review_rating
        varchar_1026 review_text
        date review_date
        primary_key review_id 
        foreign_key review_restaurant_id
    }

    accessibility {
        int accessibility_id
        int accessibility_restaurant_id
        float accessibility_miles_to_VCU
        varchar_256 accessibility_nearby_bus_stops
        varchar_256 accessibility_notes
        primary_key accessibility_id
        foreign_key accessibility_restaurant_id
    }

    menu {
        int menu_id
        int restaurant_id
        primary_key menu_id
        foreign_key restaurant_id
    }

    item {
        int item_id
        int item_dietary_preference_id
        varchar_256 item_name
        varchar_512 item_description
        float item_price
        primary_key item_id
        foreign_key item_dietary_preference_id
    }

    menu_items {
        int menu_item_id
        int menu_id
        int item_id
        primary_key menu_item_id
        foreign_key menu_id
        foreign_key item_id
    }



```



## Relational Schemas

### Restaurants
- **Attributes**: restaurant_id (PK), restaurant_name, restaurant_formality_level, restaurant_avg_total_per_person, restaurant_location_id (FK), restaurant_type
- **Types**: Integer, String, String, Numeric, Integer, String
- **Primary Key**: restaurant_id
- **Foreign Keys**: restaurant_location_id (locations)

### Location
- **Attributes**: location_id (PK), location_address, location_neighborhood, location_direction_from_VCU
- **Types**: Integer, String, String, String
- **Primary Key**: location_id

### Menu
- **Attributes**: menu_id (PK), restaurant_id (FK), item_id (FK)
- **Types**: Integer, Integer, Integer
- **Primary Key**: menu_id
- **Foreign Keys**: restaurant_id (restaurants), item_id (items)

### Items
- **Attributes**: item_id (PK), item_name, item_description, item_price, item_dietary_preference_id (FK)
- **Types**: Integer, String, String, Numeric, Integer
- **Primary Key**: item_id
- **Foreign Key**: item_dietary_preference_id (dietary_preference)

### Accessibility
- **Attributes**: accessibility_id (PK), accessibility_restaurant_id (FK), accessibility_nearby_bus_stops, accessibility_notes
- **Types**: Integer, Integer, String, String
- **Primary Key**: accessibility_id
- **Foreign Key**: accessibility_restaurant_id (restaurants)

### Reviews
- **Attributes**: review_id (PK), review_restaurant_id (FK), review_rating, review_text
- **Types**: Integer, Integer, Numeric, String
- **Primary Key**: review_id
- **Foreign Key**: review_restaurant_id (restaurants)

### Dietary Preference
- **Attributes**: dietary_preference_id (PK), dietary_preference_name
- **Types**: Integer, String
- **Primary Key**: dietary_preference_id

**Constraints**

- Primary keys enforce uniqueness and identify each record.
- Foreign keys establish relationships between tables.
- Attribute domains define the data types for each attribute.

## Functional Dependencies and Normalization

### Functional Dependencies

Let's analyze the functional dependencies (FDs) in the proposed database schema:

1. In the **Restaurants** relation:
   - `restaurant_id` $\rightarrow$ `restaurant_name`, `restaurant_location_id`

2. In the **Location** relation:
   - `location_id` $\rightarrow$ `location_address`, `location_neighborhood`, `location_direction_from_VCU`

3. In the **Menu** relation:
   - `menu_id` $\rightarrow$ `restaurant_id`

4. In the **Items** relation:
   - `item_id` $\rightarrow$ `item_name`, `item_description`, `item_price`, `item_dietary_preference_id`

5. In the **Accessibility** relation:
   - `accessibility_id` $\rightarrow$ `accessibility_restaurant_id`, `accessibility_nearby_bus_stops`, `accessibility_notes`

6. In the **Reviews** relation:
   - `review_id` $\rightarrow$ `review_restaurant_id`, `review_rating`, `review_text`

7. In the **Dietary Preference** relation:
   - `dietary_preference_id` $\rightarrow$ `dietary_preference_name`

### Normalization to BCNF

To achieve Boyce-Codd Normal Form (BCNF), we ensure that for any non-trivial FD, the left-hand side (LHS) is a superkey. The decomposition of the schema into BCNF is as follows:

- **Restaurants**, **Location**, **Menu**, **Items**, **Accessibility**, **Reviews**, and **Dietary Preference** remain as is, as their FDs hold for their primary keys.

- The other tables do not require further decomposition as their FDs adhere to BCNF.

### Decomposition

Here's a summary of the decomposition and their respective functional dependencies:

* $R_{0}(\text{Restaurant ID}, \text{Name}, \text{Location ID})$ having FD(s): $\text{Restaurant ID} \rightarrow \text{Name}$ and $\text{Location ID} \rightarrow \text{Address, Neighborhood, Cardinal Direction from VCU}$
  - Explanation: 
    - $R_{0}$ represents the `restaurants` table and its dependencies.
    - `Restaurant ID` uniquely determines `Name`.
    - `Location ID` uniquely determines `Address`, `Neighborhood`, and `Cardinal Direction from VCU`.

- $R_{1}(\text{Location ID}, \text{Address}, \text{Neighborhood}, \text{Cardinal Direction from VCU})$ having FD(s): No additional functional dependencies
  - Explanation:
    - $R_{1}$ corresponds to the `locations` table, capturing location-specific details.
    - No additional functional dependencies exist within this relation.

- $R_{2}(\text{Menu ID}, \text{Restaurant ID}, \text{Type})$ having FD(s): $\text{Restaurant ID} \rightarrow \text{Type}$
  - Explanation:
    - $R_{2}$ pertains to the `menu` table and its dependency on restaurant IDs.
    - `Restaurant ID` determines `Type` within this relation.

- $R_{3}(\text{Item ID}, \text{Item Name}, \text{Description}, \text{Price}, \text{Dietary Preference ID})$ having FD(s): $\text{Dietary Preference ID} \rightarrow \text{Preference Name}$
  - Explanation:
    - $R_{3}$ reflects the `items` table and its dependencies.
    - `Dietary Preference ID` determines `Preference Name` uniquely in this context.

- $R_{4}(\text{Accessibility ID}, \text{Restaurant ID}, \text{Nearby Bus Stops}, \text{Sidewalk Availability})$ having FD(s): $\text{Restaurant ID} \rightarrow \text{Name}$
  - Explanation:
    - $R_{4}$ doesn't directly align but demonstrates a dependency similar to the accessibility details, reflecting restaurant names based on `Restaurant ID`.

- $R_{5}(\text{Review ID}, \text{Restaurant ID}, \text{Rating}, \text{Review Text})$ having FD(s): $\text{Restaurant ID} \rightarrow \text{Name}$
  - Explanation:
    - $R_{5}$ mirrors the `reviews` table, indicating dependencies related to restaurant names based on `Restaurant ID`.
## Specific Queries

Pose 20 distinct questions that the database can help answer, written in precise words using relational algebra. Leverage Quarto to write the formulas.

---
column-style: "align: left;"
---
### Questions



### Queries (Relational Algebra)
| Question | Relational Algebra Expression | Answer |
|----------|------------------------------|--------|
| Which restaurants have nearby bus stops and sidewalk availability? | $\pi_{\text{Name}}((\text{Accessibility} \bowtie \text{Restaurants}) \cap (\sigma_{\text{Sidewalk Availability} = \text{'Yes'}}(\text{Accessibility})))$ | Picolla Italy Pizza & Subs, Village Cafe, 821 Cafe, Crazy Thai Restaurant |
| What is the total count of visits for each restaurant offering discounts? | $\gamma_{\text{Sum(Count)}}(\text{Visits} \bowtie (\text{Discounts} \bowtie \text{Restaurants}))$ | Picolla Italy Pizza & Subs: 2, Village Cafe: 1, Kuba Kuba: 0, Dinamo: 0, 821 Cafe: 0, Crazy Thai Restaurant: 0 |
| Which restaurants offer discounts and have a formal level of "Casual"? | $\pi_{\text{Name}}((\text{Restaurants} \bowtie \text{Discounts}) \cap (\sigma_{\text{Formality Level} = \text{'Casual'}}(\text{Restaurants})))$ | Picolla Italy Pizza & Subs, Village Cafe, 821 Cafe |
| What is the average rating for restaurants in each neighborhood? | $\gamma_{\text{avg(Rating)}}(\text{Reviews} \bowtie \text{Restaurants} \bowtie \text{Location})$ | The Fan: 3.6, VCU: 5.0 |
| What is the total count of visits to "Village Cafe"? | $\gamma_{\text{Sum(Count)}}(\text{Visits} \bowtie (\sigma_{\text{Name} = \text{'Village Cafe'}}(\text{Restaurants})))$ | 5 |
| What is the total count of visits to "Kuba Kuba"? | $\gamma_{\text{Sum(Count)}}(\text{Visits} \bowtie (\sigma_{\text{Name} = \text{'Kuba Kuba'}}(\text{Restaurants}))))$ | 2 |
| What is the highest-rated restaurant with a formal level of "Casual"? | $\text{max(Rating)}(\text{Reviews} \bowtie (\sigma_{\text{Formality Level} = \text{'Casual'}}(\text{Restaurants}))))$ | Picolla Italy Pizza & Subs |
| How many visits were made to Italian restaurants? | $\gamma_{\text{Sum(Count)}}(\text{Visits} \bowtie (\sigma_{\text{Type} = \text{'Italian'}}(\text{Restaurants} \bowtie \text{Location}))))$ | 9 |
| Which restaurants have both sidewalk availability and discounts? | $\pi_{\text{Name}}((\text{Restaurants} \bowtie \text{Accessibility}) \cap (\text{Restaurants} \bowtie \text{Discounts}))$ | Picolla Italy Pizza & Subs, Village Cafe, Crazy Thai Restaurant |
| Which restaurants have the highest average rating? | $\pi_{\text{Name}}(\text{Restaurants} \bowtie (\gamma_{\text{max(Rating)}}(\text{Reviews}) \bowtie \text{Restaurants}))$ | VCU |
| How many reviews have been made for restaurants offering discounts? | $\gamma_{\text{Count(Review ID)}}(\text{Reviews} \bowtie \text{Restaurants} \bowtie \text{Discounts})$ | 4 |
| Which restaurants offer discounts and have a formal level of "Casual"? | $\pi_{\text{Name}}((\text{Restaurants} \bowtie \text{Discounts}) \cap (\sigma_{\text{Formality Level} = \text{'Casual'}}(\text{Restaurants})))$ | Village Cafe, 821 Cafe |
| What is the average rating for restaurants in The Fan neighborhood? | $\gamma_{\text{avg(Rating)}}(\text{Reviews} \bowtie (\text{Restaurants} \bowtie \text{Location}))$ | 3.4 |
| How many restaurants have reviews with ratings above 3.0? | $\gamma_{\text{Count(Restaurant ID)}}(\sigma_{\text{Rating} > 3.0}(\text{Reviews} \bowtie \text{Restaurants}))$ | 5 |
| What is the average total price for restaurants that have nearby bus stops? | $\gamma_{\text{avg(Average Total Price)}}(\text{Restaurants} \bowtie (\sigma_{\text{Nearby Bus Stops} = \text{'Yes'}}(\text{Accessibility} \bowtie \text{Restaurants} \bowtie \text{Location}))))$ | $20.00 |
| What is the total count of visits to "Crazy Thai Restaurant"? | $\gamma_{\text{Sum(Count)}}(\text{Visits} \bowtie (\sigma_{\text{Name} = \text{'Crazy Thai Restaurant'}}(\text{Restaurants}))))$ | 1 |
| What are the restaurants that offer discounts and have a formal level of "Fine Dining"? | $\pi_{\text{Name}}((\text{Restaurants} \bowtie \text{Discounts}) \cap (\sigma_{\text{Formality Level} = \text{'Fine Dining'}}(\text{Restaurants}))))$ | No such restaurants found |
| How many restaurants have reviews with ratings below 4.0? | $\gamma_{\text{Count(Restaurant ID)}}(\sigma_{\text{Rating} < 4.0}(\text{Reviews} \bowtie \text{Restaurants}))$ | 3 |

| Which restaurants have a total count of visits greater than 3? | $\pi_{\text{Name}}(\sigma_{\text{Sum(Count)} > 3}(\text{Visits} \bowtie \text{Restaurants}))$ | No such restaurants found |

### SQL Queries
| Question | SQL Query | Answer |
|----------|-----------|--------|
|What are the restaurants that are within .2 miles of the VCU compass? | select * from restaurants join accessability on (restaurant_id = accessibility_restaurant_id) where distance_to_VCU = .2 AND distance_to_VCU = .1 | answer |





## Sample Data

Provide sample data for each relation in your design, including 5-10 tuples to demonstrate the attribute domains.


</table>
<center>
::: {#tbl-panel  layout-ncol=3}

| Restaurant ID | Name                | Formality Level | Average Total Price | Location | Type          |
|---------------|---------------------|-----------------|---------------------|----------|---------------|
| 1             | Picolla Italy Pizza & Subs | Casual   | $15-20              | 1        | Italian       |
| 2             | Village Cafe         | Casual          | $15-20              | 2        | American      |
| 3             | Kuba Kuba            | Casual          | $25-30              | 3        | Cuban         |
| 4             | Dinamo               | Casual          | $25-30              | 4        | Italian       |
| 5             | 821 Cafe             | Casual          | $15-20              | 5        | American Cafe |
| 6             | Crazy Thai Restaurant| Casual          | $25-30              | 6        | Thai          |


: Restaurants Table {#tbl-first}

| Location_id | Location_address                           | Location_neighborhood | Location_direction_from_VCU |
|-------------|--------------------------------------------|-----------------------|-----------------------------|
| 1           | 1100 W Main St, Richmond, VA 23220         | The Fan               | West                        |
| 2           | 1001 W Grace St, Richmond, VA 23220        | VCU                   | Northwest                   |
| 3           | 1601 Park Ave, Richmond, VA 23220          | The Fan               | West                        |
| 4           | 821 W Cary St, Richmond, VA 23220          | VCU                   | South                       |
| 5           | 825 W Cary St, Richmond, VA 23220          | VCU                   | South                       |
| 6           | 1100 W Cary St, Richmond, VA 23220         | VCU                   | Southwest                   |

: Location Table {#tbl-second}

| Menu ID | Restaurant Id |
|---------|------------|
| 1       | 1          |
| 2       | 2          |
| 3       | 3          |
| 4       | 4          |
| 5       | 5          |
| 6       | 6          |


: Menu Table {#tbl-third}

|Item_id | Item_dietary_preference_id | Item_name                               | Item_description                                                | Item_price |
|---------|----------------------------|-----------------------------------------|-----------------------------------------------------------------|------------|
| 101     | 40                         | Chicken Wings                           | Mildly spiced, lightly-battered spicy wings served with a choice of ranch or blue cheese. | 9.20       |
| 102     | 40                         | Mozzarella Sticks                       | Deep-fried mozzarella served with marinara sauce.                | 8.75       |
| 103     | 40                         | Peperoni Arrosto                        | Roasted red bell peppers with basil, capers, and anchovies.      | 9.75       |
| 203     | 40                         | Village Breakfast Special                | 2 eggs any style, bacon, ham or sausage, a bread choice, and side choice. | 6.95       |
| 204     | 40                         | French Toast                            | Sliced French bread dipped in homemade batter and dusted with powdered sugar, served with a side choice. | 8.95       |
| 205     | 40                         | PANCAKES - Three Large Buttermilk Pancakes |                                                                | 5.95       |

: Item Table {#tbl-fourth}

| menu_id | item_id |
|---------|---------|
| 1       | 101     |
| 1       | 102     |
| 1       | 103     |
| 2       | 203     |
| 2       | 204     |
| 2       | 205     |

: Menu_Item Table {#tbl-menu_item}

| accessibility_id | accessibility_restaurant_id | accessibility_distance_to_VCU | accessibility_nearby_bus_stops              | accessibility_notes        |
|-----------------|-----------------------------|-------------------------------|--------------------------------------------|----------------------------|
| 1               | 1                           | 0.2                           | Several within a quarter of a mile          | Basically on campus        |
| 2               | 2                           | 0.3                           | Several within a quarter mile               | Basically on campus        |
| 3               | 3                           | 0.4                           | None within a quarter mile                  | Just into the fan           |
| 4               | 4                           | 0.3                           | Two within walking distance down going West on Cary | Basically on campus  |
| 5               | 5                           | 0.3                           | Several within a half mile                  | Basically on campus        |
| 6               | 6                           | 0.3                           | Several close                               | Basically on campus        |

: Accessibility Table {#tbl-accessibility}

| Review ID | Review_Restaurant ID | Rating | Review Text| Review Date |
|-----------|---------------|--------||-------------|
| 1         | 1             | 5      | Closest NY pizza I've ever tasted! | 02-21-2023 |
| 2         | 1             | 5      | This is the best pizza place in all of the Richmond.                                                                                                        | 02-14-2023 |
| 3         | 1             | 5      | Love this place                                                                                                                                                                                                                                                  | 10-22-2023 |
| 4         | 1             | 1      | Most flavorless, flaccid pie!                                                                                                                                                                                                                                                                                                                                                                  | 11-19-2023 |
| 5         | 1             | 4      |They have fresh subs.                                                                                                                                                                                                                                                                                                                                                                                                           |11-23-20             |

: Reviews Table {#tbl-reviews}

| Dietary Preference ID | Preference Name |
|----------------------- |----------------- |
| 10                    | Vegetarian      |
| 20                    | Vegan           |
| 30                     | Halal |
| 40                   | No Dietary Preference       |

: Dietary Preference Table {#tbl-dietary-preference}

Database Schema
:::

# Project Management

## Project Schedule

Create a Gantt chart with Deliverables and milestones to ensure that the project is completed on time, considering the submission deadline.


```{mermaid}
gantt
title CMSC 508 Fall Semester Project
dateFormat YYYY-MM-DD
axisFormat %m-%d

section Tasks
Find a Prompt : done, des1, 2023-08-27, 2023-08-29
Find a Partner : done, des2, 2023-09-18, 2023-09-20
Video Proposal : done, des3, 2023-10-01, 2023-10-04
Project Design : active, des4, 2023-10-04, 2023-10-15
Work on Database Pt1 : des5, 2023-10-15, 2023-11-01
Work on Database Pt2 : des6, 2023-11-01, 2023-11-20
Final Submission : des7, 2023-12-01, 2023-12-12

section Edwin Constancia
Discuss Idea for Database : done,des8, 2023-09-18, 2023-09-20
Define Database Scheme/Queries/Design : done,des9, 2023-10-01, 2023-10-14
Build Database Tables based on Design : des10, 2023-10-15, 2023-10-25
Populate Database with Sample Data : des11, 2023-10-26, 2023-11-15
Test Database operations : des12, 2023-11-16, 2023-12-09

section Alex Welk
Discuss Idea for Dtabase : done,des13, 2023-09-18, 2023-09-20
Define Create ER Digram/Project Overview/Design : done,des14, 2023-10-01, 2023-10-14
Define the Data relationships in Database : des15, 2023-10-15, 2023-10-25
Define Data Constraints : des14, 2023-10-26, 2023-11-15
Implement Security measures user access contol : des15, 2023-11-15, 2023-12-09

section Milestones
Milestone 1 Find Prompt: crit, 2023-08-29, Milestone 1: Find a Prompt Complete
Milestone 2 Find Partner: crit, 2023-09-20, Milestone 2: Find a Partner Complete
Milestone 3 Purpose Idea: crit, 2023-10-04, Milestone 3: Video Proposal Complete
Milestone 4 Project Design: crit, 2023-10-15, Milestone 4: Project Design Complete
Milestone 5 Database pt 1 : crit, 2023-11-01, Milestone 5: Work on Database 1 Complete
Milestone 6 Database pt 2: crit, 2023-11-20, Milestone 6: Work on Database 2 Complete
Milestone 7 Final : crit, 2023-12-12, Milestone 7: Final Submission    
```

## API Definition

### Accessing the Database

Your database is accessible through a RESTful API. The following endpoints allow access to the database:


### API Demonstration

A demonstration of the API's functionality can be showcased using tools like cURL or Postman. Here's an example:
- Using cURL: `curl -X GET http://your-api-endpoint/restaurants`
- Using Postman: Create a GET request to `http://your-api-endpoint/restaurants`

## Source Code Links

- [DDL SQL Code](https://github.com/cmsc-vcu/cmsc508-fa2023-prj-restaurantdirectory-group21/blob/main/src/restaurantdirectory-ddl.sql)
- [DML SQL Code](https://github.com/cmsc-vcu/cmsc508-fa2023-prj-restaurantdirectory-group21/blob/main/src/restaurantdirectory-dml.sql)
- [API Source Code](https://github.com/cmsc-vcu/cmsc508-fa2023-prj-restaurantdirectory-group21/blob/main/src/project-flask.py)

## Future Considerations

- Implementing user authentication and authorization for API access.
- Optimizing endpoint responses by implementing pagination and filtering.
- Already have locations table to account for restaurants that have multiple locations however case was not present in our current dataset.

## Reflections on the Project

The project went well overall. The initial goals were mostly achieved. If given more time to work on this we could have extended our search to a greater radius however we are happy with the amount that we were able to complete.
